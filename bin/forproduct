#!/bin/bash
#set -euo pipefail -o functrace

csvfile="$1"
barcode_column="$2"
delim="$3"
searchable_columns="$4"
cmd="$5"
set -- "${@:5}"

tempdir="$(mktemp -d)"
if [ $? != 0 ]; then exit 1; fi
tempexecutable="$(mktemp --tmpdir="$HOME/tmp" --suffix=".sh")"
if [ $? != 0 ]; then
  rm -rf "$tempdir"
  exit 1
fi

USE_FZF=true

function cleanup {
  rm -rf "$tempdir"
  rm "$tempexecutable"
}

trap cleanup EXIT

function failure {
  local lineno=$1
  local msg=$2
  echo "Failed at $lineno: $msg" 1>&2
}
#trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

# We re-populate our tempdir with generated data whenever the original CSV file changes.
cat << 'EOF' > "$tempexecutable"
#!/bin/bash
csvfile="$1"
barcode_column="$2"
tempdir="$3"
colorder="$barcode_column,$(< "$csvfile" csvstat -d ',' -n | grep --invert-match -E "^\s*[0-9]+: $barcode_column\$" | sed -E "s/^\s+([0-9]): .*/\1/" | tr '\n' ',' | sed -E 's/(.*),/\1\n/')"
< "$csvfile" csvcut -d ',' -c "$colorder" > "$tempdir/data.csv"
< "$tempdir/data.csv" csvquote | tail -n +2 | sort -k 1,1 -t , > "$tempdir/data_sorted.csv"
EOF
chmod u+x "$tempexecutable"
bash -c "$tempexecutable \"\$@\"" "null" "$csvfile" "$barcode_column" "$tempdir" 1>&2

inotify_exec_on_file_change "$csvfile" bash -c "$tempexecutable \"\$@\"" "null" "$csvfile" "$barcode_column" "$tempdir" &> /dev/null &

ntimes="1"

function separate_barcode_and_amount {
  local input="$1"
  local barcode="$(sed -E 's/([0-9]+x)?(.*)')/\2/' <<< "$input")"
  local amount="$(sed -E 's/([0-9]+x)?(.*)')/\1/' <<< "$input")"
  if [ "$amount" = "" ]; then
    amount="1"
  fi
  echo "$amount"
  echo "$barcode"
}

function do_barcode_search {
  read -erp "Enter barcode (press enter to go to manual search): " input
  readarray -t results < <(separate_barcode_and_amount "$input")
  local amount="${results[0]}"
  local barcode="${results[1]}"
  ntimes="$amount"
  
  if [ "$barcode" = "" ]; then
    return 2
  fi
  #results=$(cat "$tempdir/data.csv" | csvgrep -d , -c "$barcode_column" -r "^$barcode$")
  (cat <(head -n1 "$tempdir/data.csv") <(look -t, "$barcode" "$tempdir/data_sorted.csv" | csvquote -u)) > "$tempdir/results.csv"
  resultcount=$(< "$tempdir/results.csv" csvrowcount)
  echo "Got $resultcount results." 1>&2
  if [ "$resultcount" -le "0" ]; then
    return 1
  fi

  return 0
}

function do_manual_search {
  if [ "$USE_FZF" = true ]; then
    cp "$tempdir/data.csv" "$tempdir/results.csv"
    resultcount=$(< "$tempdir/data.csv" csvrowcount)
  else
    while :
    do
      read -erp "Enter search query (press enter to stop): " query
      if [ "$query" = "" ]; then
        return 1
      fi
      # (?i) is regex flag for case insensivity
      < "$csvfile" csvgrep -d "$delim" -r "(?i)$query" -c "$searchable_columns" -a > "$tempdir/results.csv"
      resultcount=$(< "$tempdir/results.csv" csvrowcount)

      if [ "$resultcount" -gt "1000" ]; then
        read -erp "Got $resultcount results. Are you sure you want to view them all? [y/N]" query
        if [ "$query" != "Y" ] && [ "$query" != "y" ]; then
          return 1
        fi
      fi

      echo "Got $resultcount results." 1>&2
      if [ "$resultcount" = "0" ]; then
        continue
      fi
      return 0
    done
  fi
}

function ring_bell {
  echo -e '\a' 1>&2
}

while :
do
  # Need to declare this or else it will complain about unbound variables

  ring_bell
  do_barcode_search
  do_barcode_search_result=$?
  if [ $do_barcode_search_result -eq 2 ]; then # request for manual search
    do_manual_search
    if [ "$?" = 1 ]; then # aborted
      continue
    elif [ $resultcount = "1" ]; then
      echo "Got product:"1>&2
      < "$tempdir/results.csv" csvlook -I
      echo "Continue? [Y/n]" 1>&2
      read -erp "Continue? [Y/n]" cont
      if [ "$cont" != ''  ] && [ "$cont" != "y" ]; then
        continue
      fi
    fi
  elif [ $do_barcode_search_result -eq 1 ]; then # no results from barcode search
    continue
  fi

  result="$(csvselectrow --fzf "$tempdir/results.csv")"
  csvselectresult=$?
  if [ $csvselectresult -eq 2 ]; then # aborted
    echo "Aborted selection." 1>&2
    continue
  fi

  # TODO maybe add option for async or not async callback
  for i in $(seq "$ntimes"); do
    echo "$result" | bash -c "$@" &
  done
done
